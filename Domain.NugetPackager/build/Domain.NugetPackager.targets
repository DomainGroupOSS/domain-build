<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ActualProjectType Condition="'$(ActualProjectType)'=='' And ($(OutputType) == 'Exe' Or $(OutputType) == 'WinExe')">Exe</ActualProjectType>
    <ActualProjectType Condition="'$(ActualProjectType)'=='' And $(OutputType) == 'Library' And $(ProjectConfigFileName) == 'Web.Config'">Web</ActualProjectType>
    <ActualProjectType Condition="'$(ActualProjectType)'=='' And $(OutputType) == 'Library'">Library</ActualProjectType>
    <ApplicationProjectOutputDirectory>$(OutDir)_PublishedApplications\$(MSBuildProjectName)</ApplicationProjectOutputDirectory>
    <LibraryProjectOutputDirectory>$(OutDir)_PublishedLibraries</LibraryProjectOutputDirectory>
    <DotNetCoreProjectOutputDirectory>$(OutDir)_PublishedDotNetCoreApplications</DotNetCoreProjectOutputDirectory>
    <NuGetToolPath>$(NuGetExePath)</NuGetToolPath>
  </PropertyGroup>
  <PropertyGroup>
    <PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
      PrepareForPSake;
      PublishDotNetCore;
      CopyApplications;
      PackageLibrary;
    </PrepareForRunDependsOn>
  </PropertyGroup>
  <!--
  ============================================================
  _PackageLibrary
  This target will package the project as a NuGet package and copy it into a _PublishedLibraries folder.
  ============================================================
  -->
  <Target Name="PrepareForPSake" Condition="'$(OutDir)' != '$(OutputPath)'" >
    <CreateProperty Value="DotNetCore" Condition="'%(ProjectCapability.Identity)' == 'DotNetProject'">
      <Output TaskParameter="Value" PropertyName="ActualProjectType"/>
    </CreateProperty>

    <!-- Log tasks -->
    <Message Text="Packaging $(MSBuildProjectName)" />
    <Message Text="Project Type: $(ActualProjectType)"/>
    <Message Text="Project Capability: %(ProjectCapability.Identity)"/>
  </Target>
  <Target Name="PublishDotNetCore" Condition="'$(ActualProjectType)'=='DotNetCore'">
    <Message Text="DOT NET CORE PROJECT"/>
    <Exec Command="dotnet publish &quot;$(MSBuildProjectDirectory)\project.json&quot; -o &quot;$(DotNetCoreProjectOutputDirectory)\$(MSBuildProjectName)&quot;" ContinueOnError="true" />
    <Exec Condition="'$(MSBuildLastTaskResult)' == 'False'" Command="dotnet pack &quot;$(MSBuildProjectDirectory)\project.json&quot; -o &quot;$(LibraryProjectOutputDirectory)&quot;" />
  </Target>

  <!--
  ============================================================
  CopyApplications
  
  This target will copy the build outputs along with the 
  content files into a _PublishedApplications folder.
  
  This Task is only necessary when $(OutDir) has been redirected
  to a folder other than ~\bin such as is the case with Team Build.
  ============================================================
  -->
  <Target Name="CopyApplications" Condition="'$(OutDir)' != '$(OutputPath)' And '$(ActualProjectType)'=='Exe'" >
    <!-- Log tasks -->
    <Message Text="Copying Application Project Files for $(MSBuildProjectName)" />

    <Message Text="OutputType App: $(OutputType)"/>

    <!-- Create the _PublishedApplications\app\ folder -->
    <MakeDir Directories="$(ApplicationProjectOutputDirectory)" />

    <!-- Copy build outputs to _PublishedApplications\app\ folder -->
    <Copy SourceFiles="@(IntermediateAssembly)" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(AddModules)" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(IntermediateOutputPath)$(_SGenDllName)" DestinationFolder="$(ApplicationProjectOutputDirectory)\%(Content.SubFolder)%(Content.RecursiveDir)" SkipUnchangedFiles="true" Condition="'$(_SGenDllCreated)'=='true'" />
    <Copy SourceFiles="$(IntermediateOutputPath)$(TargetName).pdb" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="true" Condition="'$(_DebugSymbolsProduced)'=='true'" />
    <Copy SourceFiles="@(DocFileItem)" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="true" Condition="'$(_DocumentationFileProduced)'=='true'" />
    <Copy SourceFiles="@(IntermediateSatelliteAssembliesWithTargetPath)" DestinationFiles="@(IntermediateSatelliteAssembliesWithTargetPath->'$(ApplicationProjectOutputDirectory)\%(Culture)\$(TargetName).resources.dll')" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(ReferenceComWrappersToCopyLocal); @(ResolvedIsolatedComModules); @(_DeploymentLooseManifestFile); @(NativeReferenceFile)" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="true" />

    <!-- copy any referenced assemblies to _PublishedApplications\app\ folder -->
    <Copy SourceFiles="@(ReferenceCopyLocalPaths)" DestinationFiles="@(ReferenceCopyLocalPaths->'$(ApplicationProjectOutputDirectory)\%(DestinationSubDirectory)%(Filename)%(Extension)')" SkipUnchangedFiles="true" />

    <!-- Copy content files recursively to _PublishedApplications\app\ folder -->
    <Copy SourceFiles="@(Content)" Condition="'%(Content.Link)' == ''" DestinationFolder="$(ApplicationProjectOutputDirectory)\%(Content.RelativeDir)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(Content)" Condition="'%(Content.Link)' != ''" DestinationFiles="$(ApplicationProjectOutputDirectory)\%(Content.Link)" SkipUnchangedFiles="true"/>

    <!-- Copy items that have been marked to be copied to the output folder -->
    <Copy SourceFiles="@(_SourceItemsToCopyToOutputDirectory)" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="true"/>
    <Copy SourceFiles="@(_SourceItemsToCopyToOutputDirectoryAlways)" DestinationFolder="$(ApplicationProjectOutputDirectory)" SkipUnchangedFiles="false"/>

    <!-- Copy items that need to be bin deployed to the output folder -->
    <Copy SourceFiles="@(_binDeployableAssemblies)" DestinationFolder="$(ApplicationProjectOutputDirectory)\%(RecursiveDir)" SkipUnchangedFiles="true"/>

    <!-- Copy config files to _PublishedApplications\app\ folder -->
    <Copy SourceFiles="$(OutDir)$(TargetFileName).config" DestinationFolder="$(ApplicationProjectOutputDirectory)" ContinueOnError="true" SkipUnchangedFiles="true" />
  </Target>

  <!--
  ============================================================
  _PackageLibrary
  
  This target will package the project as a NuGet package and copy it into a _PublishedLibraries folder.
  ============================================================
  -->
  <Target Name="PackageLibrary" Condition="'$(OutDir)' != '$(OutputPath)' And '$(NuGetToolPath)' != '' And '$(ActualProjectType)'=='Library'" >
    <!-- Log tasks -->
    <Message Text="Package class library  for $(MSBuildProjectName)" />
    <Message Text="OutputType: $(OutputType)"/>
    <!-- Create the _PublishedLibraries folder -->
    <MakeDir Directories="$(LibraryProjectOutputDirectory)" />

    <!-- Create the NuGet package-->
    <Exec Command="&quot;$(NuGetToolPath)&quot; pack &quot;$(MSBuildProjectDirectory)\$(MSBuildProjectName).csproj&quot; -OutputDirectory &quot;$(LibraryProjectOutputDirectory)&quot; -IncludeReferencedProjects -Verbosity normal -Build -Properties Configuration=$(Configuration)" />
  </Target>
</Project>
